import os
import sys
import time

from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWebEngineWidgets import *

USERNAME = "atom"
LAST_PASSWORD = "12344556"
LAST_DIARY = "hi i am super man"
VERSION = 1.0
LAST_UPDATE = "25.05.23"

class IconBase64:
    '''
    The class responsible for the image.
    Initially, the image is base64.
    '''

    # Password display icon in the input line.
    def showPassword():
        pixmap = QPixmap()
        pixmap.loadFromData(QByteArray.fromBase64(b''))
        icon = pixmap
        return icon

    # Password hiding icon in the input line.
    def hidePassword():
        pixmap = QPixmap()
        pixmap.loadFromData(QByteArray.fromBase64(b''))
        icon = pixmap
        return icon

    def git():
        pixmap = QPixmap()
        pixmap.loadFromData(QByteArray.fromBase64(b''))
        icon = pixmap
        return icon

class Password(QLineEdit):
    '''
    The widget class is 'QLineEdit' which contains a password entry line.
    Show/hide password icon.
    '''

    def __init__(self):
        super().__init__()
        self.setEchoMode(QLineEdit.Password)
        self.show_password = QAction(QIcon(IconBase64.showPassword()), '', self)
        self.show_password.setCheckable(True)
        self.addAction(self.show_password, QLineEdit.TrailingPosition)
        self.show_password.toggled.connect(self.showPassword)
        self.show_password.setVisible(False)
        self.textChanged.connect(self.checkingInput)

    '''
    Hide the icon if there is no text in the field.
    Well, if there is a text, then show it.
    '''
    def checkingInput(self):
        if self.text() == '':
            self.show_password.setVisible(False)
        else:
            self.show_password.setVisible(True)

    # The function of showing/hiding the password.
    def showPassword(self):
        if self.show_password.isChecked() == True:
            self.setEchoMode(QLineEdit.Normal)
            self.show_password.setIcon(QIcon(IconBase64.hidePassword()))
        elif self.show_password.isChecked() == False:
            self.setEchoMode(QLineEdit.Password)
            self.show_password.setIcon(QIcon(IconBase64.showPassword()))

class Home(QWidget):

    def __init__(self, main, parent, *args, **kwargs):
        super().__init__(parent, *args, **kwargs)
        lastpasswotd = Password()
        lastpasswotd.setFixedWidth(250)
        lastpasswotd.setText(LAST_PASSWORD)

        label_info_program = QLabel(f"Hello, {USERNAME}! Welcome to Metros Personal Vault.")
        label_info_pc = QLabel("{} {} {} {}".format(os.uname()[0], os.uname()[1], os.uname()[2], os.uname()[4]))
        label_info_pc.setAlignment(Qt.AlignRight)

        button_github = QPushButton()
        button_github.setStyleSheet("border:none;")
        button_github.setIcon(QIcon(IconBase64.git()))
        button_github.setCursor(Qt.PointingHandCursor)

        hbox_info = QHBoxLayout()
        hbox_info.addWidget(button_github)
        hbox_info.addWidget(QLabel(f"Version: {VERSION} — {LAST_UPDATE}"))
        hbox_info.addStretch(1)

        hbox_last_password = QHBoxLayout()
        hbox_last_password.addWidget(QLabel("Last password:"))
        hbox_last_password.addWidget(lastpasswotd)
        hbox_last_password.addStretch(1)

        text = QTextEdit()
        text.setMinimumHeight(500)

        label_file_path = QLabel("Taken from file: \\file.txt")
        label_file_path.setStyleSheet("color:grey;")

        hbox_grid = QGridLayout()
        hbox_grid.addWidget(QLabel("Last post:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), 1, 0)
        hbox_grid.addWidget(text, 1, 1)
        hbox_grid.addWidget(label_file_path, 2, 1)


        grid = QGridLayout()
        grid.addWidget(label_info_program, 0, 0)
        grid.addWidget(label_info_pc, 0, 1)
        grid.addLayout(hbox_info, 1, 0)
        grid.addWidget(QLabel(), 2, 0)
        grid.addLayout(hbox_last_password, 3, 0)
        grid.addLayout(hbox_grid, 5, 0, 1, 0)



        vbox = QVBoxLayout()
        vbox.addLayout(grid)
        vbox.addStretch(1)
        self.setLayout(vbox)


class Window(QWidget):

    def __init__(self, main, *args, **kwargs):
        super().__init__(main, *args, **kwargs)
        self.layout = QVBoxLayout()
        self.tabs = QTabWidget()
        self.tab1 = QWidget()
        self.tab2 = QWidget()
        self.tab3 = QWidget()

        self.tabs.addTab(self.tab1, "Home")
        self.tabs.addTab(self.tab2, "Diary")
        self.tabs.addTab(self.tab3, "Password manager")

        self.tab1.layout = QVBoxLayout()
        self.tab1.layout.addWidget(Home(main, self))

        self.tab1.setLayout(self.tab1.layout)
        self.layout.addWidget(self.tabs)
        self.setLayout(self.layout)


class Application(QMainWindow):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setWindowTitle(f"{USERNAME} — Metros Personal Vault")
        self.setGeometry(300, 300, 1200, 600)
        frame_geometry = self.frameGeometry()
        frame_geometry.moveCenter(QDesktopWidget().availableGeometry().center())
        self.move(frame_geometry.topLeft())
        self.statusBar()
        self.setCentralWidget(Window(self))


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    window = Application()
    window.show()
    app.exec_()
